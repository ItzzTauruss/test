--[[ 
    WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]

-- Set FPS cap to 10 with retry logic
setfpscap(10)

-- Debugging print to ensure setfpscap is called
print("Attempting to set FPS cap to 10")

-- Retry logic to ensure FPS cap is set
local maxRetries = 5
local success = false

for i = 1, maxRetries do
    success = pcall(function()
        setfpscap(10)
    end)
    if success then
        print("FPS cap set to 10 successfully")
        break
    else
        warn("Failed to set FPS cap, retrying... (" .. i .. "/" .. maxRetries .. ")")
        wait(0.5)  -- Wait for half a second before retrying
    end
end

if not success then
    warn("Failed to set FPS cap after " .. maxRetries .. " attempts")
end

-- Services and variables initialization
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local destinationPlaceId = 14368557094 -- The destination place ID
local placeId1 = 16281300371 -- Place 1
local placeId2 = 13772394625 -- Place 2
local player = Players.LocalPlayer
local maxRetries = 3 -- Maximum retries for teleport
local reconnecting = false -- To prevent multiple reconnections

-- Function to safely teleport with retries
local function safeTeleport(placeId, retries)
    local attempts = 0

    while attempts < retries do
        local success, err = pcall(function()
            TeleportService:Teleport(placeId, player)
        end)

        if success then
            print("Teleport successful!")
            return true
        else
            warn("Teleport failed: " .. tostring(err))
            attempts += 1
            wait(2) -- Wait before retrying
        end
    end

    warn("Failed to teleport after " .. retries .. " attempts.")
    return false
end

-- Check the current place ID and teleport if needed
if game.PlaceId == placeId1 or game.PlaceId == placeId2 then
    print("Attempting to teleport to the destination place...")
    safeTeleport(destinationPlaceId, maxRetries)
else
    print("Current place is not configured for teleportation.")
end

-- Reconnect to the same instance if disconnected
game:GetService("NetworkClient").ChildRemoved:Connect(function()
    if not reconnecting then
        reconnecting = true
        print("Reconnecting to the same instance...")

        local attempts = 0
        while attempts < maxRetries do
            local success, err = pcall(function()
                TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
            end)

            if success then
                print("Reconnection successful!")
                reconnecting = false
                return
            else
                warn("Reconnection failed: " .. tostring(err))
                attempts += 1
                wait(2) -- Wait before retrying
            end
        end

        warn("Failed to reconnect after " .. maxRetries .. " attempts.")
        reconnecting = false
    else
        print("Reconnect already in progress, skipping.")
    end
end)

-- Emote Name Mapping
local emoteNames = {
    Emote199 = "Phoenix Rebirth",
    Emote200 = "Aurora Spirit",
    Emote207 = "Celestial Levitation",
    Emote209 = "Sinister Awakening",
    Emote210 = "Celestial Awakening",
    Emote492 = "Chroma DJ",
    Emote493 = "Zeus Revenge",
    Emote280 = "Ocean Embrace",
    Emote216 = "Mythical Enchanter",
    Emote356 = "Enchanted Blossom",
}

-- Rare Emotes to detect (based on IDs)
local rareEmotes = {
    "Emote199", "Emote200", "Emote207", "Emote209", "Emote210", 
    "Emote492", "Emote493", "Emote280", "Emote216", "Emote356",
}

local OSTime = os.time()
local Time = os.date('!*t', OSTime)
local Avatar = 'https://cdn.discordapp.com/embed/avatars/4.png'
local Content = 'test'

local Embed = {
    title = 'Blade Ball AFK World - Rare Emotes Detected',
    color = 16711680, -- Red color in hex
    footer = { text = game.JobId },
    author = {
        name = 'Tauruses',
        url = 'https://www.roblox.com/'
    },
    fields = {
        {
            name = 'Detected Rare Emotes',
            value = 'None', -- Placeholder text, will be updated with detected emotes
        },
        {
            name = 'Player Username',
            value = '', -- Placeholder text for the username
        }
    },
    timestamp = string.format('%d-%d-%dT%02d:%02d:%02dZ', Time.year, Time.month, Time.day, Time.hour, Time.min, Time.sec)
}

-- Function to check for rare emotes in the player's inventory
local function checkForRareEmotes()
    local player = game.Players.LocalPlayer
    local emoteList = player.PlayerGui:WaitForChild("EmoteWheel"):WaitForChild("List"):WaitForChild("Content"):GetChildren()
    local rareFound = {}

    for _, emote in ipairs(emoteList) do
        if table.find(rareEmotes, emote.Name) then
            -- Map emote name to the custom name
            local emoteCustomName = emoteNames[emote.Name] or emote.Name
            table.insert(rareFound, emoteCustomName)
        end
    end

    return rareFound
end

-- Function to send a webhook message with the detected rare emotes
local function sendWebhookMessage(emotes)
    local HttpService = game:GetService('HttpService')
    local player = game.Players.LocalPlayer

    -- Update the player username in the embed
    Embed.fields[2].value = player.Name

    -- Prepare the embed field to show detected emotes
    Embed.fields[1].value = #emotes > 0 and table.concat(emotes, ", ") or "No rare emotes detected"

    -- Prepare the webhook message body
    local data = {
        content = Content,
        embeds = { Embed }
    }

    -- Send the request using synapse's HTTP request functions
    (syn and syn.request or http_request) {
        Url = 'https://discord.com/api/webhooks/1319271027854802985/DyjBg0_w1D-c1CmQPpsK6f5dOEV8lHerWfnQWxGzItiKtMWfCDui8zwofu7L8nQrU1d0', -- Your webhook URL
        Method = 'POST',
        Headers = {
            ['Content-Type'] = 'application/json',
        },
        Body = HttpService:JSONEncode(data),
    }
end

-- Periodically check for rare emotes every 5 minutes (300 seconds)
while true do
    local rareEmotesDetected = checkForRareEmotes()

    if #rareEmotesDetected > 0 then
        -- Send detected rare emotes to the webhook
        sendWebhookMessage(rareEmotesDetected)
    end

    wait(300) -- Wait 5 minutes before checking again
end

-- Anti-AFK: Prevents the player from being kicked for being idle
local function preventAFK()
    while true do
        -- Move the player slightly or simulate some input
        game:GetService("RunService").Heartbeat:Wait()  -- Wait for the next frame
        player.Character:Move(Vector3.new(0, 0, 0))  -- No real movement, just a simulation
    end
end

-- Start the anti-AFK function
preventAFK()
