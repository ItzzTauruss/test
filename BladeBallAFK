repeat wait() until game:IsLoaded() and game.Players.LocalPlayer
setfpscap(10)
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local UserInputService = game:GetService("UserInputService")
local NetworkClient = game:GetService("NetworkClient")

-- Discord webhook URL
local webhookUrl = "https://discord.com/api/webhooks/1319271027854802985/DyjBg0_w1D-c1CmQPpsK6f5dOEV8lHerWfnQWxGzItiKtMWfCDui8zwofu7L8nQrU1d0"

-- Emote to Name mapping
local emoteNames = {
    Emote199 = "Phoenix Rebirth (1/10M)",
    Emote200 = "Aurora Spirit (1/5M)",
    Emote207 = "Celestial Levitation (1/250K)",
    Emote209 = "Sinister Awakening (1/1M)",
    Emote210 = "Celestial Awakening (1/2.5M)",
    Emote492 = "Chroma DJ (1/10M)",
    Emote493 = "Zeus Revenge (1/7.5M)",
    Emote280 = "Ocean Embrace (1/500K)",
    Emote216 = "Mythical Enchanter (1/7.5M)",
    Emote356 = "Enchanted Blossom (1/750K)",
    Emote208 = "Matrix Infusion (1/100K)",
    Emote211 = "Void Shield (1/200K)",
    Emote217 = "Elemental Mark (1/150K)",
    Emote218 = "Dimensional Pit (1/75K)",
    Emote282 = "Evil Summon (1/66K)",
    Emote354 = "Phantom Cloak (1/350K)",
    Emote501 = "Rose Quartz (1/33K)",
    Emote500 = "Glitched (1/20K)",
    Emote502 = "Tropical Storm (1/250K)",
}

-- Teleportation Settings
local destinationPlaceId = 14368557094 -- The destination place ID
local placeId1 = 16281300371 -- The ID for Place 1
local placeId2 = 13772394625 -- The ID for Place 2
local maxRetries = 5 -- Maximum number of retry attempts
local retryDelay = 3 -- Time (in seconds) between retries

local player = Players.LocalPlayer

-- Function to send webhook notification
local function sendWebhookNotification(emoteName, username)
    local content = "@everyone"
    local embed = {
        title = "Blade Ball AFK World",
        color = 16711680,  -- Red color for the embed
        description = username .. " rolled **" .. emoteName .. "**!",
        footer = { text = "Game Job ID: " .. game.JobId },
        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ", os.time())  -- ISO 8601 timestamp
    }

    local body = HttpService:JSONEncode({
        content = content,
        embeds = { embed }
    })

    print("Sending webhook for:", emoteName)
    local success, response = pcall(function()
        local request = syn and syn.request or http_request
        return request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = body
        })
    end)

    if success then
        print("Webhook sent successfully!")
    else
        warn("Error sending webhook:", response)
    end
end

-- Function to monitor the ScrollingFrame for new emotes
local function monitorEmote()
    local username = player.Name
    print("Script executed for player: " .. username)

    local playerGui = player:FindFirstChild("PlayerGui")
    if playerGui then
        local afkWorld = playerGui:FindFirstChild("AFKWorld")
        if afkWorld then
            local right = afkWorld:FindFirstChild("Right")
            if right then
                local main = right:FindFirstChild("Main")
                if main then
                    local scrollList = main:FindFirstChild("ScrollList")
                    if scrollList then
                        local scrollingFrame = scrollList:FindFirstChild("ScrollingFrame")
                        if scrollingFrame then
                            print("Monitoring ScrollingFrame for new emotes...")

                            -- Listen for new emotes being added to the ScrollingFrame
                            scrollingFrame.ChildAdded:Connect(function(child)
                                print("New child detected:", child.Name, "Class:", child.ClassName)

                                -- Check if it's a valid emote
                                local emoteName = emoteNames[child.Name]
                                if emoteName then
                                    print(username .. " rolled " .. emoteName .. "!")
                                    sendWebhookNotification(emoteName, username)
                                else
                                    print("Unrecognized or ignored child detected:", child.Name)
                                end
                            end)

                            -- Keep the script running indefinitely to continue monitoring
                            while true do
                                task.wait(1)  -- Add a small wait to avoid excessive processing
                            end
                        else
                            print("ScrollingFrame not found.")
                        end
                    else
                        print("ScrollList not found.")
                    end
                else
                    print("Main not found.")
                end
            else
                print("Right not found.")
            end
        else
            print("AFKWorld not found.")
        end
    else
        print("PlayerGui not found for player: " .. username)
    end
end

-- Function to handle safe teleportation with retries
local function safeTeleport(placeId)
    for attempt = 1, maxRetries do
        print(string.format("Teleport attempt %d/%d...", attempt, maxRetries))
        local success, errorMsg = pcall(function()
            TeleportService:Teleport(placeId, player)
        end)
        if success then
            print("Teleport successful!")
            return true
        else
            warn(string.format("Teleport attempt %d failed: %s", attempt, tostring(errorMsg)))
            wait(retryDelay)
        end
    end
    warn("All teleport attempts failed.")
    return false
end

-- Check the current place ID and teleport if it matches placeId1 or placeId2
if game.PlaceId == placeId1 or game.PlaceId == placeId2 then
    print("Current place matches. Attempting teleport...")
    local success = safeTeleport(destinationPlaceId)
    if not success then
        warn("Failed to teleport to the destination after all retries.")
    end
else
    print("Current place is not configured for teleportation.")
end

-- Emergency reconnection to the same instance if disconnected
NetworkClient.ChildRemoved:Connect(function()
    print("NetworkClient disconnected. Attempting reconnection...")
    for attempt = 1, maxRetries do
        local success, errorMsg = pcall(function()
            TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
        end)
        if success then
            print("Reconnection successful!")
            return
        else
            warn(string.format("Reconnection attempt %d failed: %s", attempt, tostring(errorMsg)))
            wait(retryDelay)
        end
    end
    warn("All reconnection attempts failed.")
end)

-- Anti-AFK functionality: Simulate actions to prevent AFK kick
local function antiAFK()
    while true do
        if not UserInputService:GetFocusedTextBox() then
            -- Simulate a minor action to prevent AFK
            game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"):FireServer(" ", "All")
        end
        wait(30)  -- Adjust time interval as needed
    end
end

-- Start anti-AFK function
spawn(antiAFK)

-- Start monitoring emotes
monitorEmote()
